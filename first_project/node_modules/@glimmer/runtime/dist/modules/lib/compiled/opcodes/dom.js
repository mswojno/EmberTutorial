import { UpdatingOpcode } from '../../opcodes';
import { unwrap, expect } from '@glimmer/util';
import { CachedReference, ReferenceCache, combineTagged, isConst as isConstReference, isModified } from '@glimmer/reference';
import { NULL_REFERENCE, PrimitiveReference } from '../../references';
import { Assert } from './vm';
import { APPEND_OPCODES } from '../../opcodes';
APPEND_OPCODES.add(29 /* Text */, (vm, { op1: text }) => {
    vm.stack().appendText(vm.constants.getString(text));
});
APPEND_OPCODES.add(30 /* Comment */, (vm, { op1: text }) => {
    vm.stack().appendComment(vm.constants.getString(text));
});
APPEND_OPCODES.add(32 /* OpenElement */, (vm, { op1: tag }) => {
    vm.stack().openElement(vm.constants.getString(tag));
});
APPEND_OPCODES.add(33 /* PushRemoteElement */, vm => {
    let reference = vm.frame.getOperand();
    let cache = isConstReference(reference) ? undefined : new ReferenceCache(reference);
    let element = cache ? cache.peek() : reference.value();
    vm.stack().pushRemoteElement(element);
    if (cache) {
        vm.updateWith(new Assert(cache));
    }
});
APPEND_OPCODES.add(34 /* PopRemoteElement */, vm => vm.stack().popRemoteElement());
APPEND_OPCODES.add(35 /* OpenComponentElement */, (vm, { op1: _tag }) => {
    let tag = vm.constants.getString(_tag);
    vm.stack().openElement(tag, new ComponentElementOperations(vm.env));
});
APPEND_OPCODES.add(36 /* OpenDynamicElement */, vm => {
    let tagName = vm.frame.getOperand().value();
    vm.stack().openElement(tagName);
});
class ClassList {
    constructor() {
        this.list = null;
        this.isConst = true;
    }
    append(reference) {
        let { list, isConst } = this;
        if (list === null)
            list = this.list = [];
        list.push(reference);
        this.isConst = isConst && isConstReference(reference);
    }
    toReference() {
        let { list, isConst } = this;
        if (!list)
            return NULL_REFERENCE;
        if (isConst)
            return PrimitiveReference.create(toClassName(list));
        return new ClassListReference(list);
    }
}
class ClassListReference extends CachedReference {
    constructor(list) {
        super();
        this.list = [];
        this.tag = combineTagged(list);
        this.list = list;
    }
    compute() {
        return toClassName(this.list);
    }
}
function toClassName(list) {
    let ret = [];
    for (let i = 0; i < list.length; i++) {
        let value = list[i].value();
        if (value !== false && value !== null && value !== undefined)
            ret.push(value);
    }
    return (ret.length === 0) ? null : ret.join(' ');
}
export class SimpleElementOperations {
    constructor(env) {
        this.env = env;
        this.opcodes = null;
        this.classList = null;
    }
    addStaticAttribute(element, name, value) {
        if (name === 'class') {
            this.addClass(PrimitiveReference.create(value));
        }
        else {
            this.env.getAppendOperations().setAttribute(element, name, value);
        }
    }
    addStaticAttributeNS(element, namespace, name, value) {
        this.env.getAppendOperations().setAttribute(element, name, value, namespace);
    }
    addDynamicAttribute(element, name, reference, isTrusting) {
        if (name === 'class') {
            this.addClass(reference);
        }
        else {
            let attributeManager = this.env.attributeFor(element, name, isTrusting);
            let attribute = new DynamicAttribute(element, attributeManager, name, reference);
            this.addAttribute(attribute);
        }
    }
    addDynamicAttributeNS(element, namespace, name, reference, isTrusting) {
        let attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);
        let nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);
        this.addAttribute(nsAttribute);
    }
    flush(element, vm) {
        let { env } = vm;
        let { opcodes, classList } = this;
        for (let i = 0; opcodes && i < opcodes.length; i++) {
            vm.updateWith(opcodes[i]);
        }
        if (classList) {
            let attributeManager = env.attributeFor(element, 'class', false);
            let attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());
            let opcode = attribute.flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
        this.opcodes = null;
        this.classList = null;
    }
    addClass(reference) {
        let { classList } = this;
        if (!classList) {
            classList = this.classList = new ClassList();
        }
        classList.append(reference);
    }
    addAttribute(attribute) {
        let opcode = attribute.flush(this.env);
        if (opcode) {
            let { opcodes } = this;
            if (!opcodes) {
                opcodes = this.opcodes = [];
            }
            opcodes.push(opcode);
        }
    }
}
export class ComponentElementOperations {
    constructor(env) {
        this.env = env;
        this.attributeNames = null;
        this.attributes = null;
        this.classList = null;
    }
    addStaticAttribute(element, name, value) {
        if (name === 'class') {
            this.addClass(PrimitiveReference.create(value));
        }
        else if (this.shouldAddAttribute(name)) {
            this.addAttribute(name, new StaticAttribute(element, name, value));
        }
    }
    addStaticAttributeNS(element, namespace, name, value) {
        if (this.shouldAddAttribute(name)) {
            this.addAttribute(name, new StaticAttribute(element, name, value, namespace));
        }
    }
    addDynamicAttribute(element, name, reference, isTrusting) {
        if (name === 'class') {
            this.addClass(reference);
        }
        else if (this.shouldAddAttribute(name)) {
            let attributeManager = this.env.attributeFor(element, name, isTrusting);
            let attribute = new DynamicAttribute(element, attributeManager, name, reference);
            this.addAttribute(name, attribute);
        }
    }
    addDynamicAttributeNS(element, namespace, name, reference, isTrusting) {
        if (this.shouldAddAttribute(name)) {
            let attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);
            let nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);
            this.addAttribute(name, nsAttribute);
        }
    }
    flush(element, vm) {
        let { env } = this;
        let { attributes, classList } = this;
        for (let i = 0; attributes && i < attributes.length; i++) {
            let opcode = attributes[i].flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
        if (classList) {
            let attributeManager = env.attributeFor(element, 'class', false);
            let attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());
            let opcode = attribute.flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
    }
    shouldAddAttribute(name) {
        return !this.attributeNames || this.attributeNames.indexOf(name) === -1;
    }
    addClass(reference) {
        let { classList } = this;
        if (!classList) {
            classList = this.classList = new ClassList();
        }
        classList.append(reference);
    }
    addAttribute(name, attribute) {
        let { attributeNames, attributes } = this;
        if (!attributeNames) {
            attributeNames = this.attributeNames = [];
            attributes = this.attributes = [];
        }
        attributeNames.push(name);
        unwrap(attributes).push(attribute);
    }
}
APPEND_OPCODES.add(37 /* FlushElement */, vm => {
    let stack = vm.stack();
    let action = 'FlushElementOpcode#evaluate';
    stack.expectOperations(action).flush(stack.expectConstructing(action), vm);
    stack.flushElement();
});
APPEND_OPCODES.add(38 /* CloseElement */, vm => vm.stack().closeElement());
APPEND_OPCODES.add(39 /* PopElement */, vm => vm.stack().popElement());
APPEND_OPCODES.add(40 /* StaticAttr */, (vm, { op1: _name, op2: _value, op3: _namespace }) => {
    let name = vm.constants.getString(_name);
    let value = vm.constants.getString(_value);
    if (_namespace) {
        let namespace = vm.constants.getString(_namespace);
        vm.stack().setStaticAttributeNS(namespace, name, value);
    }
    else {
        vm.stack().setStaticAttribute(name, value);
    }
});
APPEND_OPCODES.add(41 /* Modifier */, (vm, { op1: _name, op2: _manager, op3: _args }) => {
    let manager = vm.constants.getOther(_manager);
    let rawArgs = vm.constants.getExpression(_args);
    let stack = vm.stack();
    let { constructing: element, updateOperations } = stack;
    let args = rawArgs.evaluate(vm);
    let dynamicScope = vm.dynamicScope();
    let modifier = manager.create(element, args, dynamicScope, updateOperations);
    vm.env.scheduleInstallModifier(modifier, manager);
    let destructor = manager.getDestructor(modifier);
    if (destructor) {
        vm.newDestroyable(destructor);
    }
    vm.updateWith(new UpdateModifierOpcode(manager, modifier, args));
});
export class UpdateModifierOpcode extends UpdatingOpcode {
    constructor(manager, modifier, args) {
        super();
        this.manager = manager;
        this.modifier = modifier;
        this.args = args;
        this.type = "update-modifier";
        this.tag = args.tag;
        this.lastUpdated = args.tag.value();
    }
    evaluate(vm) {
        let { manager, modifier, tag, lastUpdated } = this;
        if (!tag.validate(lastUpdated)) {
            vm.env.scheduleUpdateModifier(modifier, manager);
            this.lastUpdated = tag.value();
        }
    }
    toJSON() {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.args)]
        };
    }
}
export class StaticAttribute {
    constructor(element, name, value, namespace) {
        this.element = element;
        this.name = name;
        this.value = value;
        this.namespace = namespace;
    }
    flush(env) {
        env.getAppendOperations().setAttribute(this.element, this.name, this.value, this.namespace);
        return null;
    }
}
export class DynamicAttribute {
    constructor(element, attributeManager, name, reference, namespace) {
        this.element = element;
        this.attributeManager = attributeManager;
        this.name = name;
        this.reference = reference;
        this.namespace = namespace;
        this.cache = null;
        this.tag = reference.tag;
    }
    patch(env) {
        let { element, cache } = this;
        let value = expect(cache, 'must patch after flush').revalidate();
        if (isModified(value)) {
            this.attributeManager.updateAttribute(env, element, value, this.namespace);
        }
    }
    flush(env) {
        let { reference, element } = this;
        if (isConstReference(reference)) {
            let value = reference.value();
            this.attributeManager.setAttribute(env, element, value, this.namespace);
            return null;
        }
        else {
            let cache = this.cache = new ReferenceCache(reference);
            let value = cache.peek();
            this.attributeManager.setAttribute(env, element, value, this.namespace);
            return new PatchElementOpcode(this);
        }
    }
    toJSON() {
        let { element, namespace, name, cache } = this;
        let formattedElement = formatElement(element);
        let lastValue = expect(cache, 'must serialize after flush').peek();
        if (namespace) {
            return {
                element: formattedElement,
                type: 'attribute',
                namespace,
                name,
                lastValue
            };
        }
        return {
            element: formattedElement,
            type: 'attribute',
            namespace: namespace === undefined ? null : namespace,
            name,
            lastValue
        };
    }
}
function formatElement(element) {
    return JSON.stringify(`<${element.tagName.toLowerCase()} />`);
}
APPEND_OPCODES.add(42 /* DynamicAttrNS */, (vm, { op1: _name, op2: _namespace, op3: trusting }) => {
    let name = vm.constants.getString(_name);
    let namespace = vm.constants.getString(_namespace);
    let reference = vm.frame.getOperand();
    vm.stack().setDynamicAttributeNS(namespace, name, reference, !!trusting);
});
APPEND_OPCODES.add(43 /* DynamicAttr */, (vm, { op1: _name, op2: trusting }) => {
    let name = vm.constants.getString(_name);
    let reference = vm.frame.getOperand();
    vm.stack().setDynamicAttribute(name, reference, !!trusting);
});
export class PatchElementOpcode extends UpdatingOpcode {
    constructor(operation) {
        super();
        this.type = "patch-element";
        this.tag = operation.tag;
        this.operation = operation;
    }
    evaluate(vm) {
        this.operation.patch(vm.env);
    }
    toJSON() {
        let { _guid, type, operation } = this;
        return {
            guid: _guid,
            type,
            details: operation.toJSON()
        };
    }
}
//# sourceMappingURL=data:application/json;base64,