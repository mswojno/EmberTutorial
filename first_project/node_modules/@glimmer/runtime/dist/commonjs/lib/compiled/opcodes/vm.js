"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const opcodes_1 = require("../../opcodes");
const reference_1 = require("@glimmer/reference");
const util_1 = require("@glimmer/util");
const reference_2 = require("@glimmer/reference");
const opcodes_2 = require("../../opcodes");
opcodes_2.APPEND_OPCODES.add(0 /* PushChildScope */, vm => vm.pushChildScope());
opcodes_2.APPEND_OPCODES.add(1 /* PopScope */, vm => vm.popScope());
opcodes_2.APPEND_OPCODES.add(2 /* PushDynamicScope */, vm => vm.pushDynamicScope());
opcodes_2.APPEND_OPCODES.add(3 /* PopDynamicScope */, vm => vm.popDynamicScope());
opcodes_2.APPEND_OPCODES.add(4 /* Put */, (vm, { op1: reference }) => {
    vm.frame.setOperand(vm.constants.getReference(reference));
});
opcodes_2.APPEND_OPCODES.add(5 /* EvaluatePut */, (vm, { op1: expression }) => {
    let expr = vm.constants.getExpression(expression);
    vm.evaluateOperand(expr);
});
opcodes_2.APPEND_OPCODES.add(6 /* PutArgs */, (vm, { op1: args }) => {
    vm.evaluateArgs(vm.constants.getExpression(args));
});
opcodes_2.APPEND_OPCODES.add(7 /* BindPositionalArgs */, (vm, { op1: _symbols }) => {
    let symbols = vm.constants.getArray(_symbols);
    vm.bindPositionalArgs(symbols);
});
opcodes_2.APPEND_OPCODES.add(8 /* BindNamedArgs */, (vm, { op1: _names, op2: _symbols }) => {
    let names = vm.constants.getArray(_names);
    let symbols = vm.constants.getArray(_symbols);
    vm.bindNamedArgs(names, symbols);
});
opcodes_2.APPEND_OPCODES.add(9 /* BindBlocks */, (vm, { op1: _names, op2: _symbols }) => {
    let names = vm.constants.getArray(_names);
    let symbols = vm.constants.getArray(_symbols);
    vm.bindBlocks(names, symbols);
});
opcodes_2.APPEND_OPCODES.add(10 /* BindPartialArgs */, (vm, { op1: symbol }) => {
    vm.bindPartialArgs(symbol);
});
opcodes_2.APPEND_OPCODES.add(11 /* BindCallerScope */, vm => vm.bindCallerScope());
opcodes_2.APPEND_OPCODES.add(12 /* BindDynamicScope */, (vm, { op1: _names }) => {
    let names = vm.constants.getArray(_names);
    vm.bindDynamicScope(names);
});
opcodes_2.APPEND_OPCODES.add(13 /* Enter */, (vm, { op1: start, op2: end }) => vm.enter(start, end));
opcodes_2.APPEND_OPCODES.add(14 /* Exit */, (vm) => vm.exit());
opcodes_2.APPEND_OPCODES.add(15 /* Evaluate */, (vm, { op1: _block }) => {
    let block = vm.constants.getBlock(_block);
    let args = vm.frame.getArgs();
    vm.invokeBlock(block, args);
});
opcodes_2.APPEND_OPCODES.add(16 /* Jump */, (vm, { op1: target }) => vm.goto(target));
opcodes_2.APPEND_OPCODES.add(17 /* JumpIf */, (vm, { op1: target }) => {
    let reference = vm.frame.getCondition();
    if (reference_2.isConst(reference)) {
        if (reference.value()) {
            vm.goto(target);
        }
    }
    else {
        let cache = new reference_2.ReferenceCache(reference);
        if (cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
opcodes_2.APPEND_OPCODES.add(18 /* JumpUnless */, (vm, { op1: target }) => {
    let reference = vm.frame.getCondition();
    if (reference_2.isConst(reference)) {
        if (!reference.value()) {
            vm.goto(target);
        }
    }
    else {
        let cache = new reference_2.ReferenceCache(reference);
        if (!cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
exports.ConstTest = function (ref, _env) {
    return new reference_1.ConstReference(!!ref.value());
};
exports.SimpleTest = function (ref, _env) {
    return ref;
};
exports.EnvironmentTest = function (ref, env) {
    return env.toConditionalReference(ref);
};
opcodes_2.APPEND_OPCODES.add(19 /* Test */, (vm, { op1: _func }) => {
    let operand = vm.frame.getOperand();
    let func = vm.constants.getFunction(_func);
    vm.frame.setCondition(func(operand, vm.env));
});
class Assert extends opcodes_1.UpdatingOpcode {
    constructor(cache) {
        super();
        this.type = "assert";
        this.tag = cache.tag;
        this.cache = cache;
    }
    evaluate(vm) {
        let { cache } = this;
        if (reference_2.isModified(cache.revalidate())) {
            vm.throw();
        }
    }
    toJSON() {
        let { type, _guid, cache } = this;
        let expected;
        try {
            expected = JSON.stringify(cache.peek());
        }
        catch (e) {
            expected = String(cache.peek());
        }
        return {
            guid: _guid,
            type,
            args: [],
            details: { expected }
        };
    }
}
exports.Assert = Assert;
class JumpIfNotModifiedOpcode extends opcodes_1.UpdatingOpcode {
    constructor(tag, target) {
        super();
        this.target = target;
        this.type = "jump-if-not-modified";
        this.tag = tag;
        this.lastRevision = tag.value();
    }
    evaluate(vm) {
        let { tag, target, lastRevision } = this;
        if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {
            vm.goto(target);
        }
    }
    didModify() {
        this.lastRevision = this.tag.value();
    }
    toJSON() {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.target.inspect())]
        };
    }
}
exports.JumpIfNotModifiedOpcode = JumpIfNotModifiedOpcode;
class DidModifyOpcode extends opcodes_1.UpdatingOpcode {
    constructor(target) {
        super();
        this.target = target;
        this.type = "did-modify";
        this.tag = reference_2.CONSTANT_TAG;
    }
    evaluate() {
        this.target.didModify();
    }
}
exports.DidModifyOpcode = DidModifyOpcode;
class LabelOpcode {
    constructor(label) {
        this.tag = reference_2.CONSTANT_TAG;
        this.type = "label";
        this.label = null;
        this.prev = null;
        this.next = null;
        util_1.initializeGuid(this);
        if (label)
            this.label = label;
    }
    evaluate() { }
    inspect() {
        return `${this.label} [${this._guid}]`;
    }
    toJSON() {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.inspect())]
        };
    }
}
exports.LabelOpcode = LabelOpcode;
//# sourceMappingURL=data:application/json;base64,